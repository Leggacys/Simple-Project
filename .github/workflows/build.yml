name: Build project
on: [push, pull_request]

jobs:
  sendStartNotification:
    name: Send Start Notification
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        run: |
          RESPONSE=$(curl -H "Content-Type: application/json" -X POST -d '{
          "username": "GitHub",
          "content": "Am pula mare",
          "embeds": [
            {
              "type": "rich",
              "title": "Build Start",
              "description": "New changes on ${{ github.event.repository.name }} by ${{ github.actor }}",
              "color": 2123412,
              "author": {
                "name": "${{ github.actor }}",
                "url": "https://github.com/${{ github.actor }}",
                "icon_url": "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
              },
              "url": "https://github.com/***"
            }
          ]
          }' ${{ secrets.DISCORD_WEBHOOK }})
          echo "Webhook server response: $RESPONSE"

  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - iOS # Build an iOS player.
          - Android # Build an Android .apk standalone app.

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1

      - name: Build with Unity
        id: build-step
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
          
      - name: Send Discord Notification
        run: |
          RESPONSE=$(curl -H "Content-Type: application/json" -X POST -d '{
          "username": "GitHub",
          "content": "Build Results",
          "embeds": [
            {
              "type": "rich",
              "title": "Build Finished ${{ matrix.targetPlatform }} ",
              "description": "Build for ${{ matrix.targetPlatform }} on ${{ github.event.repository.name }} by${{ github.actor }} has ${{ job.status }}",
              "color": 2123412,
              "author": {
                "name": "${{ github.actor }}",
                "url": "https://github.com/${{ github.actor }}",
                "icon_url": "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
              },
              "url": "https://github.com/***"
            }
          ]
          }' ${{ secrets.DISCORD_WEBHOOK }})
          echo "Webhook server response: $RESPONSE"
          
  uploadAllArtifacts:
    name: Upload All Artifacts
    runs-on: ubuntu-latest
    needs: [buildForAllSupportedPlatforms] # Wait for both iOS and Android builds
    steps:
      - uses: actions/checkout@v4 # Need to check out the repo to potentially access files
        with:
          fetch-depth: 0
          lfs: true

      - name: Download iOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: Build-iOS
          path: ios-build

      - name: Download Android Artifact
        uses: actions/download-artifact@v4
        with:
          name: Build-Android
          path: android-build

      - name: List iOS Artifact Contents
        run: ls -R ios-build

      - name: List Android Artifact Contents
        run: ls -R android-build

      - name: Zip iOS Build Directory
        run: zip -r ios-build.zip ios-build/

      - name: List iOS Artifact Contents
        run: ls -R ios-build
        
      - name: Upload iOS Artifact to Google Drive
        uses: adityak74/google-drive-upload-git-action@main # Or your preferred upload action
        with:
          credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          filename: "ios-build.zip" # Assuming the zip file inside ios-build is named "Build-iOS.zip"
          folderId: ${{ secrets.FOLDER_ID }}
          name: "iOS.zip"
          overwrite: "false"

      - name: Upload Android Artifact to Google Drive
        uses: adityak74/google-drive-upload-git-action@main # Or your preferred upload action
        with:
          credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          filename: "android-build/Android.apk" # Assuming the zip file inside android-build is named "Build-Android.zip"
          folderId: ${{ secrets.FOLDER_ID }}
          name: "android"
          overwrite: "false"
  
  
